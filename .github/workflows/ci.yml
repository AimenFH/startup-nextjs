name: CI Pipeline

on:
  # Trigger lint and build on each push to any branch
  push:
    branches:
      - '**'
  # Trigger audit and Docker push when a pull request is merged into main or release
  pull_request:
    branches:
      - main
      - release
    types:
      - closed

jobs:
  # Lint job that runs on each push to any branch
  lint:
    name: Lint
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: npm install
      - name: Run linter
        run: npm run lint

  # Build job that runs on each push to any branch
  build:
    name: Build
    runs-on: ubuntu-latest
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: npm install
      - name: Build the app
        run: npm run build

  # Audit job that runs only when a pull request is merged into main or release
  audit:
    name: Audit
    runs-on: ubuntu-latest
    if: github.event.pull_request.merged == true
    steps:
      - name: Checkout code
        uses: actions/checkout@v3
      - name: Set up Node.js
        uses: actions/setup-node@v3
        with:
          node-version: 18
      - name: Install dependencies
        run: npm install
      - name: Run npm audit
        run: npm audit --production

  # Docker push job that runs only when a pull request is merged into the release branch
  docker:
    name: Build and Push Docker Image to Docker Hub
    runs-on: ubuntu-latest
    needs: audit  # Ensure audit job completes before Docker push
    if: github.event.pull_request.merged == true && github.ref == 'refs/heads/release'
    steps:
      # Step 1: Checkout the repository code
      - name: Checkout code
        uses: actions/checkout@v3

      # Step 2: Log in to Docker Hub using the provided credentials
      - name: Log in to Docker Hub
        uses: docker/login-action@v2
        with:
          username: aimendoc
          password: ${{ secrets.DOCKERHUB_PASSWORD }}

      # Step 3: Build the Docker image
      - name: Build Docker image
        run: docker build -t aimendoc/my-startup-nextjs:${{ github.sha }} .

      # Step 4: Push the Docker image to Docker Hub
      - name: Push Docker image to Docker Hub
        run: docker push aimendoc/my-startup-nextjs:${{ github.sha }}

      # Optional Step 5: Tag the Docker image as latest and push it
      - name: Tag Docker image as latest
        run: |
          docker tag aimendoc/my-startup-nextjs:${{ github.sha }} aimendoc/my-startup-nextjs:latest
          docker push aimendoc/my-startup-nextjs:latest

deploy:
  name: Deploy to Kubernetes Cluster and Scale
  runs-on: ubuntu-latest
  needs: docker
  steps:
    # Install kubectl
    - name: Install kubectl
      uses: azure/setup-kubectl@v1
      with:
        version: 'latest'

    # Create .kube directory
    - name: Create .kube directory
      run: mkdir -p ~/.kube

    # Set up kubeconfig using GitHub secret
    - name: Set up kubeconfig
      run: |
        echo "${{ secrets.KUBECONFIG }}" > ~/.kube/config

    # Update Kubernetes deployment with new Docker image
    - name: Update Kubernetes deployment
      run: |
        kubectl set image deployment/my-startup-nextjs my-startup-nextjs=aimendoc/my-startup-nextjs:${{ github.sha }} --record

    # Scale the application to 3 replicas
    - name: Scale Kubernetes deployment
      run: |
        kubectl scale deployment my-startup-nextjs --replicas=3

    # Verify the Kubernetes rollout status
    - name: Verify Kubernetes rollout
      run: |
        kubectl rollout status deployment my-startup-nextjs